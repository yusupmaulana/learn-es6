=====================================
		BELAJAR ES6 / ES2015
=====================================


0. intro ES6 dan setup babel ===============================================================================
- kalo mau bikin aplikasi pake javascript di production maka kita harus pake babel utk ngecompile es6 menjadi javascript biasa (didukung oleh semua browser). karena ES6 ini belum disupport di semua browser. kecuali browser2 versi terbaru.
- tapi kalo cuma utk development sendiri atau buat tools utk automasi sendri dan udah tau kalo browser nya disupport, kita nggak perlu pake babel.
- install babel liat doc nya di babeljs.io setup


1. var vs let vs const =====================================================================================
//variable
- var : bersifat function scope, artinya ketika kita mendefinisikan var maka kita akan dapat memanggilnya dimana aja. (variable global)
- let & const : bersifat block scope, artinya dia hidupnya pada block block tertentu (di dalam fungsi misalnya).
- let : jika ada nama variable yang sama pada block yg sama maka akan throw error (berbeda dengan var).
- tetapi jika dimasukkan ke dalam sebuah block maka tidak akan terjadi error meskipun nama variable nya sama.
- pada var meskipun kita mendefinisikannya di dalam sebuah block scope (fungsi) sebenarnya di balik layar dia tetap di definisikan secara global.
- berbeda lagi dengan let, kalo let didefinisikan di dalam block, maka akan error jika dipanggil secara global.

- const = sesuatu yang nilai nya tidak bisa diubah, bukan nggak bisa diubah sebenarnya, tp nggak bisa di re assign, kita bisa menambahkan dan mengubah nilai nya.
- untuk contoh const coba bikin object person dengan atribut id dan nama.
- kalo kita deklarasikan ulang object person maka akan error.
- tapi kalo menambahkan atribut / mengubah nilai atribut ngga akan error. misal person.age = 21.
- sementara kalo menggunakan let kita akan bisa reassign object.
- nggak ada waktu yang baku kapan utk menggunakan var atau let. tapi kalo mau migrasi ke ES6 sebaiknya mulai sekarang menggunakan let aza.


2. BERKENALAN DENGAN SYNTAX ARROW ==================================================================================================
- syntax arrow -- => -- function shorthand
- bisa menghapus keyword function dan di ganti dengan tanda =>
- lakukan looping array dengan metode forEach() atau menggunakan metode map()
- kalo pake syntax arrow kita nggak perlu lagi pake keyword return (jika di dalam fungsi tsb mengandung return)
- kemudian kalo pake syntax arrow konteks this nya jadi berubah. this nya jadi mengacu ke object itu sendiri(kalo keyword function dihilangkan), berbeda dengan menggunakan keyword function yang this nya akan mengacu ke window.
- inti dari syntax arrow ini adalah membuat function menjadi lebih singkat.


3. DEFAULT PARAMETER
==================================================================================================
- Di ES6 kita sekarang bisa memberikan nilai default pada parameter ketika kita mengoper nilai.
- sebelum ES6 kita bisa membuat default dengan membuat sebuah variable dan diisi nilai nya, kemudian di console log dengan parameter yang mandatory (nilai nya wajib)
- parameter nggak cuma bisa diisi dengan string atau primitive variable lainnya, tapi bisa juga dengan mengoper sebuah fungsi yang sebelumnya telah di definisikan terlebih dahulu. very interesting.
- nggak perlu lagi mengecek apakah ada nilai nya atau parameter tsb undefined.


4. REST & SPREAD
================================================================================================
- rest dan spread masih tentang fungsi dan parameter.
- pada contoh ada function signIn yang mengoper parameter username dan password, kemudian setelah mendefinisikan function tsb dan sebelum memanggil nya kita buat parameter utk function tsb dalam bentuk array. kemudian array tsb kita oper sebagai parameter ketika memanggil function signIn tadi signIn(data[0], data[1])
- parameter diatas dapat diganti dengan (...data) maka dia akan mengambil semua nilai array nya dan memecahnya berdasarkan masing-masing parameter tsb. nggak peduli berapapun banyaknya parameternya .
- logika nya bisa dibalik, kalo kita ngoper parameternya dalam beberapa variabel dan syntax triple dot nya kita letakan di function maka dia akan menjadi bentuk array (kebalikan dari tadi)


5. template literal
================================================================================================
- template literal (template string)
- template literal ini memudahkan kita dalam melakukan concatenate dengan readable contohnya. 
`Member ${username} umurnya ${umur}`
- dengan backtick ini (`) kita juga dapat membuat multiline.
- dengan template literal ini kita bisa juga menjadikannya sebuah parameter ketika kita memanggil fungsi, dan di dalam fungsi tsb kita bisa memanipulasi nilai dari parameter nya sesuai dengan kebutuhan kita.