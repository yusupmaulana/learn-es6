=====================================
		BELAJAR ES6 / ES2015
=====================================


0. intro ES6 dan setup babel ===============================================================================
- kalo mau bikin aplikasi pake javascript di production maka kita harus pake babel utk ngecompile es6 menjadi javascript biasa (didukung oleh semua browser). karena ES6 ini belum disupport di semua browser. kecuali browser2 versi terbaru.
- tapi kalo cuma utk development sendiri atau buat tools utk automasi sendri dan udah tau kalo browser nya disupport, kita nggak perlu pake babel.
- install babel liat doc nya di babeljs.io setup


1. var vs let vs const =====================================================================================
//variable
- var : bersifat function scope, artinya ketika kita mendefinisikan var maka kita akan dapat memanggilnya dimana aja. (variable global)
- let & const : bersifat block scope, artinya dia hidupnya pada block block tertentu (di dalam fungsi misalnya).
- let : jika ada nama variable yang sama pada block yg sama maka akan throw error (berbeda dengan var).
- tetapi jika dimasukkan ke dalam sebuah block maka tidak akan terjadi error meskipun nama variable nya sama.
- pada var meskipun kita mendefinisikannya di dalam sebuah block scope (fungsi) sebenarnya di balik layar dia tetap di definisikan secara global.
- berbeda lagi dengan let, kalo let didefinisikan di dalam block, maka akan error jika dipanggil secara global.

- const = sesuatu yang nilai nya tidak bisa diubah, bukan nggak bisa diubah sebenarnya, tp nggak bisa di re assign, kita bisa menambahkan dan mengubah nilai nya.
- untuk contoh const coba bikin object person dengan atribut id dan nama.
- kalo kita deklarasikan ulang object person maka akan error.
- tapi kalo menambahkan atribut / mengubah nilai atribut ngga akan error. misal person.age = 21.
- sementara kalo menggunakan let kita akan bisa reassign object.
- nggak ada waktu yang baku kapan utk menggunakan var atau let. tapi kalo mau migrasi ke ES6 sebaiknya mulai sekarang menggunakan let aza.


2. BERKENALAN DENGAN SYNTAX ARROW ==================================================================================================
- syntax arrow -- => -- function shorthand
- bisa menghapus keyword function dan di ganti dengan tanda =>
- lakukan looping array dengan metode forEach() atau menggunakan metode map()
- kalo pake syntax arrow kita nggak perlu lagi pake keyword return (jika di dalam fungsi tsb mengandung return)
- kemudian kalo pake syntax arrow konteks this nya jadi berubah. this nya jadi mengacu ke object itu sendiri(kalo keyword function dihilangkan), berbeda dengan menggunakan keyword function yang this nya akan mengacu ke window.
- inti dari syntax arrow ini adalah membuat function menjadi lebih singkat.


3. DEFAULT PARAMETER
==================================================================================================
- Di ES6 kita sekarang bisa memberikan nilai default pada parameter ketika kita mengoper nilai.
- sebelum ES6 kita bisa membuat default dengan membuat sebuah variable dan diisi nilai nya, kemudian di console log dengan parameter yang mandatory (nilai nya wajib)
- parameter nggak cuma bisa diisi dengan string atau primitive variable lainnya, tapi bisa juga dengan mengoper sebuah fungsi yang sebelumnya telah di definisikan terlebih dahulu. very interesting.
- nggak perlu lagi mengecek apakah ada nilai nya atau parameter tsb undefined.


4. REST & SPREAD
================================================================================================
- rest dan spread masih tentang fungsi dan parameter.
- pada contoh ada function signIn yang mengoper parameter username dan password, kemudian setelah mendefinisikan function tsb dan sebelum memanggil nya kita buat parameter utk function tsb dalam bentuk array. kemudian array tsb kita oper sebagai parameter ketika memanggil function signIn tadi signIn(data[0], data[1])
- parameter diatas dapat diganti dengan (...data) maka dia akan mengambil semua nilai array nya dan memecahnya berdasarkan masing-masing parameter tsb. nggak peduli berapapun banyaknya parameternya .
- logika nya bisa dibalik, kalo kita ngoper parameternya dalam beberapa variabel dan syntax triple dot nya kita letakan di function maka dia akan menjadi bentuk array (kebalikan dari tadi)


5. template literal
================================================================================================
- template literal (template string)
- template literal ini memudahkan kita dalam melakukan concatenate dengan readable contohnya. 
`Member ${username} umurnya ${umur}`
- dengan backtick ini (`) kita juga dapat membuat multiline.
- dengan template literal ini kita bisa juga menjadikannya sebuah parameter ketika kita memanggil fungsi, dan di dalam fungsi tsb kita bisa memanipulasi nilai dari parameter nya sesuai dengan kebutuhan kita.


6. SHORTHAND DAN DESTRUCTURING OBJECT
=================================================================================================
- dalam object kita bisa menyingkat ketika assign suatu nilai ke dalam variable, kalo nama key dengan nama variabel baru nya sama, maka key nya bisa dihapus.
- tidak hanya pada primitive datatype, tapi kita juga bisa melakukannya pada fungsi.
- berikutnya yaitu destructuring object. yaitu untuk memisahkan properti atau fungsi yang ada di dalam objek. kita bisa assign ke variabel baru ketika kita bisa memisahkan data2 nya.
- kita juga bisa melakukan destructuring pada array. misal
let umur = [1,2,3]
let[a,b,c] = umur
console.log(a+b+c)

7. CLASS
=================================================================================================
- sama seperti pada bahasa program lain, pada ES6 juga terdapat fungsi yang otomatis dipanggil ketika kita membuat sebuah object yaitu constructor.
- di dalam class juga kita dapat menyimpan fungsi (tidak hanya variable).
- ketika kita mau mengakses sebuah variabel atau fungsi yang ada di dalam kelas itu sendiri harus menggunakan keyword this (keyword this mengacu ke class itu sendiri).
- pada es6 kita juga bisa menerapkan konsep static, yang mana kita tidak perlu instansiasi objek utk dapat memanggil fungsi yang kita inginkan.

8. Berkenalan Dengan Webpack
==================================================================================================
- simple nya webpack ini kalo kita punya banyak modul atau banyak dependensi, dia akan ngerubah menjadi satu file css js atau gambar. misah2in file statisnya kemudian dijadikan satu.
- install webpack nya secara lokal ataupun global.
- untuk menggunakan webpack nya biar lebih mudah berdasarkan dokumentasi nya kita bisa membuat satu file konfigurasi nya yaitu webpack.config.js (simpan di root project)
- 2 key utama adalah tempat masuk file (entry) dan tempat keluarnya (output).
- webpack ini dia bisa ngecompile juga sama seperti sebelumnya yang kita lakukan. cuma bedanya akan ada fitur-fitur di es6 seperti import dan export yang kita nggak bisa pake babel gitu aja.
- webpack kita ini masih terpisah (belum ada hubungannya dengan babel). jadi yang perlu diingat babel utk translate dari es6 ke es5 biar bisa dibuka di semua browser. sementara webpack hanya sekedar file output yang hasil bundle dari file sebelumnya.
- agar babel dan webpack terhubung maka kita perlu extra plugin namanya webpack babel-loader.
- jadi sekarang setelah kita install babel-loader maka babel dan webpack sudah terhubung. ketika kita menjalankan perintah webpack file src akan di compile menjadi es5.

9. EXPORT DAN IMPORT
====================================================================================================
- sekarang kita bisa misahin file javascript kita ke beberapa file. tapi beberapa file ini nggak di load satu persatu oleh html. melainkan kita gabungkan beberapa file tadi di satu file javascript.
- hampir semua browser belum bisa implementasiin ini langsung, makanya kita harus menggunakan module bundler(seperti webpack yang udah kita install sebelumnya).
- buat file di src/app/member.js kemudian isinya hanya satu variabel tp karena mau di pake di file lain maka gunakan keyword export.
- untuk memanggilnya di file lain cukup gunakan keyword import {variabel} './app/member'
- buat beberapa file baru untuk mencoba menggabungkan beberapa file tersebut ke dalam satu file.

10. EXPORT DEFAULT
======================================================================================================
- export default adalah jika kita mau ada satu variabel atau satu kelas yang otomatis di import (di awal).
- ketika mau export variable nya kita nggak perlu kasih nama, dan ketika di import variable nya kita bisa kasih nama bebas.


11. KONSEP DASAR PROMISE
======================================================================================================
- promise ini simple nya yaitu seperti menggunakan ajax di jquery. ada function callback yang akan dipanggil ketika masuk ke kondisi tertentu.
- untuk membuat promise contohnya sebagai berikut:
let getMember = new Promise((resolve, reject) => { })
- resolve artinya ketika berhasil dan reject artinya ketitka gagal.
- sama seperti ajax di jquery promise ini bisa juga di chain. ketika berhasil maka dia akan masuk ke method .then((msg)=> {}) dan ketika gagal akan masuk ke method .catch((msg)=>{})